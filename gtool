#!/usr/bin/env bash
# Copyright 2023-2025 GlitchyByte
# SPDX-License-Identifier: MIT

# Manage project.

# [Setup]
set -u # Exit with an error if a variable is used without being set.
set -e # Exit if any command returns an error.
# Capture caller directory and script directory.
readonly calling_dir="${PWD}"
readonly script_dir="$(cd "$(dirname "$0")" && pwd)"
# Go to script directory and load utilities.
cd "${script_dir}"

# [Functions]
print_usage() {
  echo "Usage: $0 <setup|build|copy>"
  echo "    setup - Sets up project."
  echo "    build - Builds project."
  echo "    copy <dest> - Makes a clean copy of the project into dest."
}

setup_project() {
  # Remove node_modules.
  if [ -d "node_modules" ]; then
    rm -dr node_modules
  fi
  # Remove package-lock.json.
  if [ -f "package-lock.json" ]; then
    rm package-lock.json
  fi
  # Install.
  npm install
  return 0
}

build_project() {
  # Remove dist.
  out_dir=$(sed -E -e 's|/\*.*\*/||' -e 's|//.*$||' tsconfig.json | jq -r '.compilerOptions.outDir')
  if [[ "${out_dir}" == "null" ]]; then
    echo "No outDir in tsconfig.json"
    return 1
  fi
  if [ -d "${out_dir}" ]; then
    rm -dr "${out_dir}"
  fi
  # Build.
  npm run build
  return 0
}

copy_project() {
  if [ $# -eq 0 ]; then
    print_usage
    return 1
  fi
  # Get destination package directory.
  dest="$1"
  # Verify dest exists.
  if [ ! -d "${dest}" ]; then
    echo "Destination does not exist: ${dest}"
    return 1
  fi
  package_name=$(jq -r '.name' package.json)
  dest_package_dir="${dest}/${package_name}"
  # Create directory.
  if [ -d "${dest_package_dir}" ]; then
    rm -dr "${dest_package_dir}"
  fi
  mkdir -p "${dest_package_dir}"
  # Copy files to destination package directory.
  paths=$(jq -r '.files[]' package.json)
  while read -r path; do
    final_dest="${dest_package_dir}/${path}"
    mkdir -p "${final_dest}"
    cp -r "${path}/" "${final_dest}/"
  done <<< "${paths}"
  cp package.json "${dest_package_dir}/"
  return 0
}

# [Router]
# Capture command.
if [ $# -eq 0 ]; then
  command="exit"
else
  command="$1"
  shift
fi

# Remove macOS cruft.
find . -name ".DS_Store" -type f -delete

# Route command.
case "${command}" in
  "setup")
    setup_project
    code=$?
    ;;
  "build")
    build_project
    code=$?
    ;;
  "copy")
    copy_project "$@"
    code=$?
    ;;
  *)
    print_usage
    code=1
    ;;
esac

# [Teardown]
cd "${calling_dir}"
exit $code
